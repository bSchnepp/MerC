#include <string>
#include <cstdint>

#ifndef _MERC_TOKEN_HPP_
#define _MERC_TOKEN_HPP_

namespace merc
{

typedef enum TokenType
{
	TOKEN_TYPE_VOID,
	TOKEN_TYPE_BOOL,
	TOKEN_TYPE_CHAR,
	TOKEN_TYPE_WCHAR,
	TOKEN_TYPE_STRING,
	TOKEN_TYPE_WSTRING,
	TOKEN_TYPE_LONG,
	TOKEN_TYPE_INT,
	TOKEN_TYPE_SHORT,
	TOKEN_TYPE_BYTE,
	TOKEN_TYPE_ULONG,
	TOKEN_TYPE_UINT,
	TOKEN_TYPE_USHORT,
	TOKEN_TYPE_UBYTE,
	TOKEN_TYPE_DOUBLE,
	TOKEN_TYPE_FLOAT,

	TOKEN_TYPE_BOOL_LITERAL,
	TOKEN_TYPE_CHAR_LITERAL,
	TOKEN_TYPE_WCHAR_LITERAL,
	TOKEN_TYPE_STRING_LITERAL,
	TOKEN_TYPE_WSTRING_LITERAL,
	TOKEN_TYPE_LONG_LITERAL,
	TOKEN_TYPE_INT_LITERAL,
	TOKEN_TYPE_SHORT_LITERAL,
	TOKEN_TYPE_BYTE_LITERAL,
	TOKEN_TYPE_ULONG_LITERAL,
	TOKEN_TYPE_UINT_LITERAL,
	TOKEN_TYPE_USHORT_LITERAL,
	TOKEN_TYPE_UBYTE_LITERAL,
	TOKEN_TYPE_DOUBLE_LITERAL,
	TOKEN_TYPE_FLOAT_LITERAL,

	TOKEN_TYPE_PLUS,
	TOKEN_TYPE_MINUS,
	TOKEN_TYPE_STAR,
	TOKEN_TYPE_SLASH,
	TOKEN_TYPE_EXCLAIM,
	TOKEN_TYPE_QUESTION,
	TOKEN_TYPE_EQUALS,
	TOKEN_TYPE_AMPERSAND,
	TOKEN_TYPE_VBAR,
	TOKEN_TYPE_CARET,
	TOKEN_TYPE_TILDE,
	TOKEN_TYPE_PERCENT,
	TOKEN_TYPE_SINGLE_QUOTE,
	TOKEN_TYPE_DOUBLE_QUOTE,
	TOKEN_TYPE_BACKSLASH,
	TOKEN_TYPE_PERIOD,
	TOKEN_TYPE_COMMA,
	TOKEN_TYPE_SEMICOLON,
	TOKEN_TYPE_COLON,

	TOKEN_TYPE_LESS_THAN_EQUALS,
	TOKEN_TYPE_GREATER_THAN_EQUALS,
	TOKEN_TYPE_NOT_EQUALS,
	TOKEN_TYPE_DOUBLE_EQUALS,
	TOKEN_TYPE_DOUBLE_PLUS,
	TOKEN_TYPE_DOUBLE_MINUS,
	TOKEN_TYPE_PLUS_EQUALS,
	TOKEN_TYPE_MINUS_EQUALS,
	TOKEN_TYPE_TIMES_EQUALS,
	TOKEN_TYPE_DIV_EQUALS,
	TOKEN_TYPE_MOD_EQUALS,
	TOKEN_TYPE_DOUBLE_AMPERSAND,
	TOKEN_TYPE_DOUBLE_VBAR,
	TOKEN_TYPE_AND_EQUALS,
	TOKEN_TYPE_OR_EQUALS,

	TOKEN_TYPE_LANGLE,
	TOKEN_TYPE_RANGLE,
	TOKEN_TYPE_LSQUARE,
	TOKEN_TYPE_RSQUARE,
	TOKEN_TYPE_LBRACE,
	TOKEN_TYPE_RBRACE,
	TOKEN_TYPE_LPAREN,
	TOKEN_TYPE_RPAREN,

	TOKEN_TYPE_IF,
	TOKEN_TYPE_ELSE,
	TOKEN_TYPE_WHILE,
	TOKEN_TYPE_FOR,
	TOKEN_TYPE_BREAK,
	TOKEN_TYPE_CONTINUE,
	TOKEN_TYPE_RETURN,
	TOKEN_TYPE_MATCH,

	TOKEN_TYPE_ERROR,
}TokenType;

typedef struct Token
{
	TokenType Type;
	std::string Token;
	uint64_t RowNumber;
	uint64_t ColNumber;
}Token;

}

#endif